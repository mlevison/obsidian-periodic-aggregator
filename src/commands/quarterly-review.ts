import { Notice, Plugin, SuggestModal } from "obsidian";
import { QuarterlyReviewSettings } from "../settings";
import {
	PeriodicNotesIntegration,
	NotesInfo,
} from "../utils/periodic-notes-integration";

interface Quarter {
	label: string;
	date: Date;
	quarter: number;
	year: number;
}

class QuarterSelectionModal extends SuggestModal<Quarter> {
	plugin: Plugin & { settings: QuarterlyReviewSettings };
	onChoose: (quarter: Quarter) => void;

	constructor(
		plugin: Plugin & { settings: QuarterlyReviewSettings },
		onChoose: (quarter: Quarter) => void,
	) {
		super(plugin.app);
		this.plugin = plugin;
		this.onChoose = onChoose;
	}

	getSuggestions(query: string): Quarter[] {
		const quarters = this.plugin.settings.quarters.map((date, index) => {
			const quarter = Math.floor(index % 4) + 1;
			const year = date.getFullYear();
			return {
				label: `Q${quarter} ${year}`,
				date: date,
				quarter: quarter,
				year: year,
			};
		});

		return quarters.filter((quarter) =>
			quarter.label.toLowerCase().includes(query.toLowerCase()),
		);
	}

	renderSuggestion(quarter: Quarter, el: HTMLElement) {
		el.createEl("div", { text: quarter.label });
	}

	onChooseSuggestion(quarter: Quarter, evt: MouseEvent | KeyboardEvent) {
		this.onChoose(quarter);
	}
}

export async function buildQuarterlyReview(
	plugin: Plugin & { settings: QuarterlyReviewSettings },
) {
	try {
		// Initialize Periodic Notes integration
		const periodicNotesIntegration = new PeriodicNotesIntegration(
			plugin.app,
		);

		// Check if daily/weekly notes functionality is available
		if (!periodicNotesIntegration.isPeriodicNotesAvailable()) {
			new Notice(
				"Daily/Weekly notes functionality is not available. Please enable Daily Notes or install Periodic Notes plugin.",
			);
			return;
		}

		// Show quarter selection modal
		const modal = new QuarterSelectionModal(
			plugin,
			async (selectedQuarter: Quarter) => {
				await createQuarterlyReview(
					plugin,
					selectedQuarter,
					periodicNotesIntegration,
				);
			},
		);
		modal.open();
	} catch (error) {
		console.error("Error building quarterly review:", error);
		new Notice(
			"Failed to create quarterly review. Check console for details.",
		);
	}
}

async function createQuarterlyReview(
	plugin: Plugin & { settings: QuarterlyReviewSettings },
	selectedQuarter: Quarter,
	periodicNotesIntegration: PeriodicNotesIntegration,
) {
	try {
		const { tempFolderPath } = plugin.settings;
		const { quarter, year } = selectedQuarter;

		// Get Daily and Weekly notes information
		new Notice("Scanning for Daily and Weekly notes...");
		const notesInfo: NotesInfo =
			await periodicNotesIntegration.getNotesInfo();

		// Create notes summary
		const notesSummary = await periodicNotesIntegration.createNotesSummary(
			notesInfo.dailyNotes,
			notesInfo.weeklyNotes,
		);

		// Create quarterly review content
		const quarterlyReviewContent = `# Quarterly Review - Q${quarter} ${year}

## Quarter Overview
**Period:** Q${quarter} ${year}
**Generated:** ${new Date().toLocaleDateString()}
**Daily Notes Found:** ${notesInfo.dailyNotes.length} (Folder: ${notesInfo.dailyFolder || "Not configured"})
**Weekly Notes Found:** ${notesInfo.weeklyNotes.length} (Folder: ${notesInfo.weeklyFolder || "Not configured"})

## Goals & Objectives
- [ ] Goal 1
- [ ] Goal 2
- [ ] Goal 3

## Key Achievements
- Achievement 1
- Achievement 2
- Achievement 3

## Challenges & Lessons Learned
### Challenges
- Challenge 1
- Challenge 2

### Lessons Learned
- Lesson 1
- Lesson 2

## Metrics & KPIs
| Metric | Target | Actual | Status |
|--------|--------|--------|--------|
| Metric 1 | | | |
| Metric 2 | | | |
| Metric 3 | | | |

## Next Quarter Planning
### Priorities for Q${quarter === 4 ? 1 : quarter + 1} ${quarter === 4 ? year + 1 : year}
- [ ] Priority 1
- [ ] Priority 2
- [ ] Priority 3

### Action Items
- [ ] Action item 1
- [ ] Action item 2
- [ ] Action item 3

## Notes from Periodic Notes
${notesSummary}

## Additional Notes
*Add any additional notes or reflections here*

---
*Generated by Quarterly Review Builder plugin*
*Temp folder: ${tempFolderPath}*
*Daily Notes Format: ${notesInfo.dailyFormat || "Not configured"}*
*Weekly Notes Format: ${notesInfo.weeklyFormat || "Not configured"}*
`;

		// Ensure temp folder exists
		const tempFolder =
			plugin.app.vault.getAbstractFileByPath(tempFolderPath);
		if (!tempFolder) {
			await plugin.app.vault.createFolder(tempFolderPath);
		}

		// Create the quarterly review file
		const fileName = `Q${quarter}_${year}_Review.md`;
		const filePath = `${tempFolderPath}/${fileName}`;

		// Check if file already exists
		const existingFile = plugin.app.vault.getAbstractFileByPath(filePath);
		if (existingFile) {
			new Notice(`Quarterly review file already exists: ${fileName}`);
			// Open the existing file
			const file = plugin.app.vault.getFileByPath(filePath);
			if (file) {
				await plugin.app.workspace.getLeaf().openFile(file);
			}
			return;
		}

		// Create the new file
		const newFile = await plugin.app.vault.create(
			filePath,
			quarterlyReviewContent,
		);

		// Open the newly created file
		await plugin.app.workspace.getLeaf().openFile(newFile);

		new Notice(`Quarterly review created: ${fileName}`);
	} catch (error) {
		console.error("Error creating quarterly review:", error);
		new Notice(
			"Failed to create quarterly review. Check console for details.",
		);
	}
}
